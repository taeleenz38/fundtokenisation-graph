// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ERC1155ContractDeployed extends ethereum.Event {
  get params(): ERC1155ContractDeployed__Params {
    return new ERC1155ContractDeployed__Params(this);
  }
}

export class ERC1155ContractDeployed__Params {
  _event: ERC1155ContractDeployed;

  constructor(event: ERC1155ContractDeployed) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenName(): string {
    return this._event.parameters[1].value.toString();
  }

  get tokenSymbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get baseUri(): string {
    return this._event.parameters[3].value.toString();
  }

  get metaDataUri(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ERC20ContractDeployed extends ethereum.Event {
  get params(): ERC20ContractDeployed__Params {
    return new ERC20ContractDeployed__Params(this);
  }
}

export class ERC20ContractDeployed__Params {
  _event: ERC20ContractDeployed;

  constructor(event: ERC20ContractDeployed) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenName(): string {
    return this._event.parameters[1].value.toString();
  }

  get tokenSymbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get tokenDecimal(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DeployManager__deployERC1155InputInputArgsStruct extends ethereum.Tuple {
  get tokenName(): string {
    return this[0].toString();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get tokenVersion(): string {
    return this[2].toString();
  }

  get baseUri(): string {
    return this[3].toString();
  }

  get metaDataUri(): string {
    return this[4].toString();
  }

  get sanctionList(): Address {
    return this[5].toAddress();
  }

  get admin(): Address {
    return this[6].toAddress();
  }

  get pauser(): Address {
    return this[7].toAddress();
  }

  get minter(): Address {
    return this[8].toAddress();
  }

  get burner(): Address {
    return this[9].toAddress();
  }

  get upgrader(): Address {
    return this[10].toAddress();
  }

  get rescueManager(): Address {
    return this[11].toAddress();
  }
}

export class DeployManager__deployERC20InputInputArgsStruct extends ethereum.Tuple {
  get tokenName(): string {
    return this[0].toString();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get tokenVersion(): string {
    return this[2].toString();
  }

  get tokenDecimal(): i32 {
    return this[3].toI32();
  }

  get sanctionList(): Address {
    return this[4].toAddress();
  }

  get admin(): Address {
    return this[5].toAddress();
  }

  get pauser(): Address {
    return this[6].toAddress();
  }

  get minter(): Address {
    return this[7].toAddress();
  }

  get burner(): Address {
    return this[8].toAddress();
  }

  get upgrader(): Address {
    return this[9].toAddress();
  }

  get rescueManager(): Address {
    return this[10].toAddress();
  }
}

export class DeployManager extends ethereum.SmartContract {
  static bind(address: Address): DeployManager {
    return new DeployManager("DeployManager", address);
  }

  deployERC1155(
    inputArgs: DeployManager__deployERC1155InputInputArgsStruct,
  ): Array<Address> {
    let result = super.call(
      "deployERC1155",
      "deployERC1155((string,string,string,string,string,address,address,address,address,address,address,address)):(address[1])",
      [ethereum.Value.fromTuple(inputArgs)],
    );

    return result[0].toAddressArray();
  }

  try_deployERC1155(
    inputArgs: DeployManager__deployERC1155InputInputArgsStruct,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "deployERC1155",
      "deployERC1155((string,string,string,string,string,address,address,address,address,address,address,address)):(address[1])",
      [ethereum.Value.fromTuple(inputArgs)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  deployERC20(
    inputArgs: DeployManager__deployERC20InputInputArgsStruct,
  ): Array<Address> {
    let result = super.call(
      "deployERC20",
      "deployERC20((string,string,string,uint8,address,address,address,address,address,address,address)):(address[1])",
      [ethereum.Value.fromTuple(inputArgs)],
    );

    return result[0].toAddressArray();
  }

  try_deployERC20(
    inputArgs: DeployManager__deployERC20InputInputArgsStruct,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "deployERC20",
      "deployERC20((string,string,string,uint8,address,address,address,address,address,address,address)):(address[1])",
      [ethereum.Value.fromTuple(inputArgs)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc20LogicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _erc11550LogicAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployERC1155Call extends ethereum.Call {
  get inputs(): DeployERC1155Call__Inputs {
    return new DeployERC1155Call__Inputs(this);
  }

  get outputs(): DeployERC1155Call__Outputs {
    return new DeployERC1155Call__Outputs(this);
  }
}

export class DeployERC1155Call__Inputs {
  _call: DeployERC1155Call;

  constructor(call: DeployERC1155Call) {
    this._call = call;
  }

  get inputArgs(): DeployERC1155CallInputArgsStruct {
    return changetype<DeployERC1155CallInputArgsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class DeployERC1155Call__Outputs {
  _call: DeployERC1155Call;

  constructor(call: DeployERC1155Call) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class DeployERC1155CallInputArgsStruct extends ethereum.Tuple {
  get tokenName(): string {
    return this[0].toString();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get tokenVersion(): string {
    return this[2].toString();
  }

  get baseUri(): string {
    return this[3].toString();
  }

  get metaDataUri(): string {
    return this[4].toString();
  }

  get sanctionList(): Address {
    return this[5].toAddress();
  }

  get admin(): Address {
    return this[6].toAddress();
  }

  get pauser(): Address {
    return this[7].toAddress();
  }

  get minter(): Address {
    return this[8].toAddress();
  }

  get burner(): Address {
    return this[9].toAddress();
  }

  get upgrader(): Address {
    return this[10].toAddress();
  }

  get rescueManager(): Address {
    return this[11].toAddress();
  }
}

export class DeployERC20Call extends ethereum.Call {
  get inputs(): DeployERC20Call__Inputs {
    return new DeployERC20Call__Inputs(this);
  }

  get outputs(): DeployERC20Call__Outputs {
    return new DeployERC20Call__Outputs(this);
  }
}

export class DeployERC20Call__Inputs {
  _call: DeployERC20Call;

  constructor(call: DeployERC20Call) {
    this._call = call;
  }

  get inputArgs(): DeployERC20CallInputArgsStruct {
    return changetype<DeployERC20CallInputArgsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class DeployERC20Call__Outputs {
  _call: DeployERC20Call;

  constructor(call: DeployERC20Call) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class DeployERC20CallInputArgsStruct extends ethereum.Tuple {
  get tokenName(): string {
    return this[0].toString();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get tokenVersion(): string {
    return this[2].toString();
  }

  get tokenDecimal(): i32 {
    return this[3].toI32();
  }

  get sanctionList(): Address {
    return this[4].toAddress();
  }

  get admin(): Address {
    return this[5].toAddress();
  }

  get pauser(): Address {
    return this[6].toAddress();
  }

  get minter(): Address {
    return this[7].toAddress();
  }

  get burner(): Address {
    return this[8].toAddress();
  }

  get upgrader(): Address {
    return this[9].toAddress();
  }

  get rescueManager(): Address {
    return this[10].toAddress();
  }
}
